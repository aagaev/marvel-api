{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","components/spinner/Spinner.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/404.js","components/pages/SinglePage.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/appHeader/AppHeader.js","components/app/App.js","index.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","Spinner","xmlns","background","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","data","json","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","console","log","res","results","map","_transformCharacter","getCharacterByName","name","getCharacter","id","getAllComics","_transformComics","getComic","char","description","str","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","AppBanner","className","avengers","avengersLogo","Page404","to","SinglePage","Component","dataType","useParams","setData","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","content","View","imgStyle","href","RandomChar","setChar","updateChar","timerId","setInterval","clearInterval","onCharLoaded","min","Math","floor","random","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","i","current","forEach","item","classList","remove","add","focus","arr","onCharSelected","tabIndex","ref","elem","onKeyPress","e","key","renderItems","disabled","Skeleton","CharInfo","charId","skeleton","CharSearchForm","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","placeholder","component","ErrorBoundary","state","errorInfo","this","setState","children","MainPage","selectedChar","decoration","ComicsList","comicsList","setComicsList","comicsEnded","setComicsEnded","onComicsListLoaded","newComicsList","ComicsPage","AppHeader","end","color","isActive","lazy","SingleComicLayout","SingleCharacterLayout","App","fallback","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a9cf922.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img \r\n        style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}}\r\n        src={img} \r\n        alt=\"error\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","const Spinner = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{margin: '0 auto', background: 'none', display: 'block'}} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n            <g transform=\"translate(80,50)\">\n            <g transform=\"rotate(0)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"1\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\n            <g transform=\"rotate(45)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.875\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(50,80)\">\n            <g transform=\"rotate(90)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.75\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\n            <g transform=\"rotate(135)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.625\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(20,50.00000000000001)\">\n            <g transform=\"rotate(180)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.5\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\n            <g transform=\"rotate(225)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.375\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(49.99999999999999,20)\">\n            <g transform=\"rotate(270)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.25\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\n            </circle>\n            </g>\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\n            <g transform=\"rotate(315)\">\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#1c4595\" fillOpacity=\"0.125\">\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\n            </circle>\n            </g>\n            </g>\n        </svg>\n    )\n}\n\nexport default Spinner;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=1d72cee4813314a40e4eb983489bd6b7';\r\n    const _baseOffset = 1541;\r\n\r\n    // getResource = async (url) => {\r\n    //     const res = await fetch(url);\r\n\r\n    //     if(!res.ok) {\r\n    //         throw new Error(`Could not fetch ${url}, status - ${res.status}`)\r\n    //     }\r\n\r\n    //     return await res.json()\r\n    // }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        console.log(offset)\r\n        //return this.getResource(`${this._apiBase}characters?limit=9&offset=210&${this._apiKey}`);\r\n        const res =  await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n       // console.log(res)\r\n        return res.data.results.map(_transformCharacter)// передаем в map callback функцию которая будет трансформировать приходящие к ней элементы(айтемы). То есть будет переходить в методе map каждый отдельный объект по порядку  и уже будет возвращаться новый объект, а в конце получим новый массив с объектами \r\n        //return res.data.results.map(item => this._transformCharacter(item))\r\n    }\r\n\r\n    // Вариант модификации готового метода для поиска по имени.\r\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n\t//     return res.data.results.map(_transformCharacter);\r\n\t// }\r\n\r\n\t// Или можно создать отдельный метод для поиска по имени\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => {\r\n        //return this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n \r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n    const noDescriptionMessage = (str) => str ? `${str.slice(0, 60)}...`  : str = 'Sorry but there is no description for this character. Please check Wiki page';\r\n    //onDecreasearr = (arr) => arr.length < 10 ? arr : arr.slice(0, 9);\r\n\r\n    const _transformCharacter = (char) => {\r\n        return { \r\n            id: char.id,\r\n            name: char.name,\r\n            description: noDescriptionMessage(char.description),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\t// optional chaining operator\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n    //return {loading, error, clearError, getAllCharacters, getCharacter,  getComics, getAllComics }\r\n    return {\r\n        loading, \r\n        error, \r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter,\r\n        getCharacterByName,\r\n        getComic,\r\n        getAllComics\r\n     }\r\n\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n","import { useCallback, useState } from \"react\"\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(null) ///or false\r\n    \r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers})\r\n\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status - ${response.status}`)\r\n            }\r\n\r\n            const data = response.json();\r\n\r\n            setLoading(false)\r\n\r\n            return data\r\n\r\n        } catch(e) { \r\n                setLoading(false)\r\n                setError(e.message)\r\n                throw e\r\n        } \r\n    }, [])\r\n\r\n    const clearError = useCallback( () => setError(null), []);\r\n\r\n    return {loading, error, request, clearError}\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ErrorMessage from \"../errorMessage/ErrorMessage\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Page404 = ()  => {\r\n    return (\r\n        <div>\r\n            <ErrorMessage/>\r\n            <p style={{'textAlign': 'center', 'fontWeight': 'bold',  'fontSize': '24px'}}>Page doesn't exist</p>\r\n            <Link style={{'display': 'block','textAlign': 'center', 'fontWeight': 'bold',  'fontSize': '24px', 'marginTop': '30px'}} to='/'>Back to main Page</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Page404;","import { useParams, Link } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\n\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n    const {id} = useParams(); //id comes from Url  <Route path='/comics/:comicId' element={ <SingleComicPage/>}/>  >>  <Link to={`/comics/${item.id}`}>\r\n    const [data, setData] = useState(null);\r\n    const {loading, error, getComic, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData()\r\n    }, [id]) //id comes from Url <Route path='/comics/:comicId' element={ <SingleComicPage/>}/>  >>  <Link to={`/comics/${item.id}`}>\r\n\r\n\r\n    const updateData = () => {      \r\n        clearError()\r\n\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id).then(onDataLoaded);\r\n                break;\r\n            case 'character':\r\n                getCharacter(id)\r\n                .then(onDataLoaded);\r\n                break;   \r\n        }  \r\n    }\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !data) ? <Component data={data}/> : null;\r\n   // const content = !(error || loading || !comic) ? <View comic={comic}/> : null;\r\n    \r\n    return (\r\n        <>  \r\n            <AppBanner/>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\n// const View = ({comic}) => {\r\n//     const {title, description, pageCount, thumbnail, language, price } = comic;\r\n\r\n//     return (\r\n//         <div className=\"single-comic\">\r\n//             <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n//             <div className=\"single-comic__info\">\r\n//                 <h2 className=\"single-comic__name\">{title}</h2>\r\n//                 <p className=\"single-comic__descr\">{description}</p>\r\n//                 <p className=\"single-comic__descr\">{pageCount}</p>\r\n//                 <p className=\"single-comic__descr\">Language: {language}</p>\r\n//                 <div className=\"single-comic__price\">{price}</div>\r\n//             </div>\r\n//             <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport default SinglePage;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState,useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage.js';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png'\n\nconst RandomChar = () => {\n   \n    // state = {\n    //     char: {},\n    //     loading: true,\n    //     error: false\n    // }\n\n    const [char, setChar] = useState({}) // or null\n    // const [loading, setLoading] = useState(false) //will take loading from Custom Hook useMarvelService\n    // const [error, setError] = useState(false) //will take error from Custom Hook useMarvelService\n\n    const {loading, error, clearError, getCharacter} = useMarvelService();\n\n    // componentDidMount() {\n    //     this.updateChar();\n    //     //this.timerId = setInterval(this.updateChar, 6000);\n    // }\n    useEffect(() => {\n        updateChar()\n        const timerId = setInterval(updateChar, 500000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n      \n    }, [])\n\n    // componentWillUnmount() {\n    //     //clearInterval(this.timerId)  \n    // }\n\n    // onCharLoading = () => {\n    //     this.setState({\n    //         loading: true\n    //     })\n    // }\n\n    // const onCharLoading = () => {\n    //    setLoading(true)\n    // }\n\n    // onCharLoaded = (char) => {\n    //     this.setState({\n    //         char, //char: char\n    //         loading: false\n    //     }) \n    //     //console.log(char)\n    // }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n        //setLoading(false)  //will take loading from Custom Hook useMarvelService\n        //console.log(char)\n    }\n\n    // onError = () => { \n    //     this.setState({\n    //         loading: false,\n    //         error: true\n    //     }) \n    // }\n\n    // const onError = () => {  //will take error from Custom Hook useMarvelService\n    //     setLoading(false)\n    //     setError(true)\n    // }\n\n    const updateChar = () => {\n        // onCharLoading(); will take loading from Custom Hook useMarvelService\n        clearError()//очищает от ошибки даже если в прошлом запросе она была, то в следующем запросе она очистится перед новым запросом\n        const max = 1011400,\n              min = 1011000,\n             id = Math.floor(Math.random()*(max-min) + min);\n        \n        getCharacter(id) //will take request to server from Custom Hook useMarvelService\n             .then(onCharLoaded) //когда мы используем промисы, цепочка через then идет, в функцию then приходит аргумент и когда внутри просто ссылка на функцию, то этот аргумент приходящий в then будет автоматически будет подставляться в метод this.onChatLoaded и затем запишеться внутрь стейта\n            //  .catch(onError)   //will take error from Custom Hook useMarvelService\n\n        // marvelService\n        //     .getCharacter(id)\n        //     .then(onCharLoaded) //когда мы используем промисы, цепочка через then идет, в функцию then приходит аргумент и когда внутри просто ссылка на функцию, то этот аргумент приходящий в then будет автоматически будет подставляться в метод this.onChatLoaded и затем запишеться внутрь стейта\n        //     .catch(onError)\n            // .then(res => {\n            //     this.setState(res)\n            // })\n           // console.log(id)\n    } \n    \n    //const {char, loading, error} = this.state;\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(error || loading) ? <View char={char}/> : null;\n    //\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>  \n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n \n    const [charList, setCharList] = useState([])\n    // const [loading, setLoading] = useState(true) //первая загрука первых 9 персонажей\n    // const [error, setError] = useState(false)\n    const [newItemLoading, setNewItemLoading] = useState(false)//ручная загрузка потому изначально false\n    const [offset, setOffset] = useState(1532)\n    const [charEnded, setCharEnded] = useState(false)\n\n    \n   \n    // state = {\n    //     charList: [],\n    //     loading: true, //первая загрука первых 9 персонажей\n    //     error: false,\n    //     newItemLoading: false,//ручная загрузка потому изначально false\n    //     offset: 1532,\n    //     charEnded: false\n    // }\n    \n    const {error, loading, getAllCharacters, clearError} = useMarvelService();\n\n    // componentDidMount() {\n    //     this.onRequest()\n    // }\n\n    useEffect(() => { //useEffect будет запущена после рендера, то есть после того, как наша функция onRequest уже существует внутри нашего компонента-функции(сonst CharList()  )\n        onRequest(offset, true); // поэтому можем спокойно использовать onRequest() выше чем она объявлена\n    }, []) // если пустой массив в зависимостях значит функция выполнится один раз при создании компонента\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true); \n       \n        //setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n          \n        // onCharListLoading() //для первичной загрузки не важно, но в будущем когда будем вызывать по клику то состояние переключится и будем для кнопки устанавливать disabled\n        // marvelService.getAllCharacters(offset)\n        //     .then(onCharListLoaded)\n        //     .catch(onError)\n    }\n\n    // onCharListLoading = () => {\n    //     this.setState({\n    //         newItemLoading: true\n    //     })\n    // }\n\n    // const onCharListLoading = () => {\n    //     setNewItemLoading(true)\n    // }\n\n    // onCharListLoaded = (newCharList) => {\n    //     let ended = false;\n    //     if(newCharList.length < 9) {\n    //         ended = true;\n    //     }\n    //     this.setState(({charList, offset}) => ({\n    //             charList: [...charList, ...newCharList],//в первый раз когда компонент отрендерился charlist будет пустой массив\n    //             loading: false,\n    //             newItemLoading: false,\n    //             offset: offset + 9,\n    //             charEnded: ended \n    //         }))        \n    // }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList])\n        //setLoading(loading => false) //Аргумент(колбэк-функцию) необязательно передавать, он не используется\n        setNewItemLoading(newItemLoading => false)\n        setOffset(offset => offset +9)\n        setCharEnded(charEnded => ended)\n    }\n\n    // const onError = () => {\n    //     setError(true);\n    //     setLoading(loading => false)\n    // }\n\n    // onError = () => {\n    //     this.setState({\n    //         error: true,\n    //         loading: false\n    //     })\n    // }\n\n    // itemRefs = [];\n    const itemRefs = useRef([]);\n\n    // setRef = (ref) => {\n    //     this.itemRefs.push(ref)\n    // }\n    \n    // focusOnItem = (i) => {\n    //     console.log(i)\n    //     this.itemRefs.forEach(item => item.classList.remove('char__item_selected'))\n    //     this.itemRefs[i].classList.add('char__item_selected');\n    //     this.itemRefs[i].focus();\n    // }\n\n    const focusOnItem = (i) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'))\n        itemRefs.current[i].classList.add('char__item_selected');\n        itemRefs.current[i].focus();\n        //при использовании useRef([]) это будет уже объект у которого у будет свойство current и мы должны его использовать\n        //itemRefs это уже массив, внутри свойства current, где каждый элемент этого массива это ссылка на дом-элемент \n    }\n\n    function renderItems(arr) {\n        const {onCharSelected} = props;\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    // ref={this.setRef}\n                    ref={elem => itemRefs.current[i] = elem} // сюда будет помещен кол-бэкРэф, который принимает в себя единственный аргумент - тот элемент на котором он был вызван(<li></li>). elem это ссылка на дом-элемент, и соотвественно в массиве itemRefs.current будет сформирован массив ссылок на дом-элементы\n                    key={item.id}\n                    onClick={() => {\n                        onCharSelected(item.id);\n                        focusOnItem(i)\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                  \n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    //const {charList, loading, error, offset, newItemLoading, charEnded} = this.state;\n    \n    const items = renderItems(charList);\n   \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n   // const content = !(loading || error) ? items : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                onClick={() => onRequest(offset)}\n                style={{'display': charEnded ? 'none' : 'block'}}>\n                    <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n \n\n// const CharItems = ({chars}) => {\n//     return (\n//         chars.map(({name, thumbnail}) => {\n//             let imgStyle = {'objectFit': 'cover'};\n//             if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n//                 imgStyle = {'objectFit': 'contain'}\n//             }\n//             return (\n    \n//                 <li key={name} className=\"char__item\">\n//                     <img style={imgStyle} src={thumbnail} alt=\"abyss\"/>\n//                     <div className=\"char__name\">{name}</div>\n//                 </li>\n//             )\n//         })\n    \n//     )\n   \n// }\n\n// CharList.propTypes = {\n//     onCharSelected: PropTypes.func.isRequired\n// }\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\n\n\nconst CharInfo = (props) => {\n    // state = {\n    //     char: null,\n    //     loading: false,\n    //     error: false\n    // }\n\n    const [char, setChar] = useState(null) // for skeleton appearing&& first page loading\n    // const [loading, setLoading] = useState(false)\n    // const [error, setError] = useState(false)\n    \n    const {loading, error, getCharacter, clearError}= useMarvelService();\n\n    // componentDidMount() {\n    //     this.updateChar();\n    // }\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    // componentDidUpdate(prevProps) {\n    //     if (this.props.charId !== prevProps.charId) {\n    //         this.updateChar();\n    //     }\n    // }\n\n    const updateChar = () => {\n        const {charId} = props\n        if(!charId) {//for skeleton appearing&& first page loading\n            return //or return null\n        }\n\n        // this.onCharLoading();\n        // this.marvelService\n        //     .getCharacter(charId)\n        //     .then(this.onCharLoaded)\n        //     .catch(this.onError)\n        //onCharLoading();\n        clearError()//очищает от ошибки даже если в прошлом запросе она была, то в следующем запросе она очистится перед новым запросом0\n        getCharacter(charId)\n            .then(onCharLoaded)\n            \n    }\n\n    // const onCharLoading = () => {\n    //     setLoading(loading => true)\n    //     // this.setState({\n    //     //     loading: true\n    //     // })\n    // }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n        //setLoading(loading => false)\n        // this.setState({\n        //     char, //char: char\n        //     loading: false\n        // }) \n\n    }\n\n    // const onError = () => {\n    //     setLoading(loading => false)\n    //     setError(error => true)\n    //     // this.setState({\n    //     //     loading: false,\n    //     //     error: true\n    //     // }) \n    // }\n\n   \n    //const {char, loading, error,} = this.state;\n    const skeleton = char || loading || error ? null  : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(error || loading || !char) ? <View char={char}/> : null;\n    \n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n   \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    //console.log(comics)\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length === 0 ? 'There is no comics' : null}\n                {\n                    comics.map((item, i) => {\n                        if (i > 10) return\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}   \nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n    \r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false)//ручная загрузка потому изначально false\n    const [offset, setOffset] = useState(0)\n    const [comicsEnded, setComicsEnded] = useState(false)\n\n    useEffect(() => { //useEffect будет запущена после рендера, то есть после того, как наша функция onRequest уже существует внутри нашего компонента-функции(сonst CharList()  )\n        onRequest(offset, true); // поэтому можем спокойно использовать onRequest() выше чем она объявлена\n    }, []) // если пустой массив в зависимостях значит функция выполнится один раз при создании компонента\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true); \n       \n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if(newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList(comicsList => [...comicsList, ...newComicsList])\n        //setLoading(loading => false) //Аргумент(колбэк-функцию) необязательно передавать, он не используется\n        setNewItemLoading(newItemLoading => false)\n        setOffset(offset => offset + 8)\n        setComicsEnded(comicsEnded => ended)\n    }\n    function renderItems (arr) {\n        const items = arr.map((item, i)=> {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            return (\n                <li className=\"comics__item\"\n                    key = {i}>\n                        <Link to={`/comics/${item.id}`}>\n                            <img src={item.thumbnail} alt={item.title} style={imgStyle} className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">{item.title}</div>\n                            <div className=\"comics__item-price\">{item.price}</div>\n                        </Link>\n                </li>\n            )\n        }) \n        return ( \n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n    const items = renderItems(comicsList)\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n    //const content = !(error || loading) ? items : null; if we dont want reload every time\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button onClick={() => onRequest(offset)} \n                className=\"button button__main button__long\" \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                disabled={newItemLoading}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import {Link, NavLink} from 'react-router-dom';\nimport './appHeader.scss';\n\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <Link to=\"/\">\n                    <span>Marvel</span> information portal\n                </Link>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><NavLink \n                        end \n                        style={({isActive}) => ({color: isActive ? 'green' : 'inherit'})} \n                        to=\"/\">Characters</NavLink></li>\n                    /\n                    <li><NavLink \n                        style={({isActive}) => ({color: isActive ? 'green' : 'inherit'})} \n                        to=\"/comics\">Comics</NavLink></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","\nimport { lazy, Suspense } from 'react';\nimport {BrowserRouter as Router,  Route, Routes} from 'react-router-dom';\n\nimport { ComicsPage, SingleComicPage } from '../pages';//именнованный import из index.js\nimport AppHeader from \"../appHeader/AppHeader\";\nimport Spinner from '../spinner/Spinner';\n\n\n\n//import Page404 from '../pages/404' //для React.Lazy нам нужен именно дэфолтный экспорт из самого файла, а не именнованный из index.js\n//динамические импорты должны импортироваться после статических\n\n\nconst Page404 = lazy(() => import('../pages/404'))\nconst MainPage = lazy(() => import('../pages/MainPage'))\nconst SingleComicLayout = lazy(() => import('../pages/singleComicLayout/SingleComicLayout'));\nconst SingleCharacterLayout = lazy(() => import('../pages/singleCharacterLayout/SingleCharacterLayout'));\nconst SinglePage = lazy(() => import('../pages/SinglePage'));\n// const ComicsPage = lazy(() => import('../pages/ComicsPage'))\n// const SingleComicPage = lazy(() => import('../pages/SingleComicPage'))\n \nconst App = () =>  {\n \n    return (\n        <Router>\n            <div className=\"app\">\n            <AppHeader/>\n            <main> \n                <Suspense fallback={<Spinner/>}> \n                    <Routes>\n                        <Route path='/' element={ <MainPage/>}/>\n                        <Route path='/comics' element={ <ComicsPage/>}/> \n                        <Route path='/characters/:id' element={ <SinglePage Component={SingleCharacterLayout} dataType='character'/>}/>  \n                        <Route path='/comics/:id' element={ <SinglePage Component={SingleComicLayout} dataType='comic'/>}/>   \n                        <Route path='*' element={<Page404/>}/>   \n                    </Routes>\n                </Suspense>\n            </main>\n        </div>\n        </Router>\n    )\n    \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nimport './style/style.scss';\n// import MarvelService from './services/MarvelService';\n\n\n// const marvel = new MarvelService();\n//  marvel.getAllCharacters().then(res => console.log(res))\n\n// marvel.getCharacter(1011052).then(res => console.log(res))\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}